import { asyncHandler } from "../utils/asyncHandler.js";
import ApiError from "../utils/ApiError.js"
import { User } from "../models/user.model.js";
import { uploadOnCloudinary } from "../utils/cloudinary.js";
import { ApiResonse } from "../utils/ApiResonse.js";
import { upload } from "../middlewares/multer.middleware.js";
import  jwt  from "jsonwebtoken";
import { deleteFromClodinary } from "../utils/cloudinary.js";



// as we will use this thing several times, so we made this method
const generateAccessAndRefreshTokens = async(userId)=>{
    try {
        const user = await User.findById(userId)
        const accessToken = user.generateAccessToken()
        const refreshToken = user.generateRefreshToken()

        // saving refresh token in DB
        user.refreshToken = refreshToken;
        await user.save({validateBeforeSave: false})      // save is from MongoDB

        return {accessToken, refreshToken}
        
    } catch (error) {
        throw new ApiError(500, "Something Went Wrong in generating Access and Refresh Token")
    }
}
const registerUser = asyncHandler( async (req,res)=>{
   
    // taking user details from frontend
    // validation - (atleast check not empty fields)
    // check if the user is already resistered or not(from username, email)
    // taking image, avater
    // upload them in cloudinary - check avatar
    // create database to store user data, entry
    // remove password, refresh token
    // check user creation
    // send res


    // taking user details
    const {fullName, email, username, password}= req.body
    //console.log("email: ",email);



    // validation --- not empty

    // if(email == ""){
    //     throw new ApiError(400, "Something Went Wrong")
    // }
    if([fullName,email, username, password].some((field)=>{field?.trim()===""})){
        throw new ApiError(400, "All Fields are Required")
    }


    // checking existed user or not
    const existedUser = await User.findOne({    // findOne means it just find one cases
        $or: [{ username },{ email }]   // this is like OR operator, checks atleast one exited
    })
    if(existedUser){
        throw new ApiError(409, "username or email is already existed")
    }

    // taking avatar and coverImage

    //console.log(req.files)
    const avatarLocalPath = req.files?.avatar[0]?.path
    //const coverLocalPath = req.files?.coverImage[0]?.path

    let coverLocalPath ;    // more classical way of checking
    if(req.files && Array.isArray(req.files.coverImage) && req.files.coverImage.length > 0){
        coverLocalPath = req.files.coverImage[0].path
    }

    if(!avatarLocalPath){
        throw new ApiError(409, "avatar is required")
    }

    // upload on cloudinary
    const avatar = await uploadOnCloudinary(avatarLocalPath)
    const coverImage = await uploadOnCloudinary(coverLocalPath)
    if(!avatar){
        throw new ApiError(409, "avatar is required")
    }

    // create store in database
    const user = await User.create({
        fullName,
        avatar: avatar?.url,
        coverImage: coverImage?.url,
        password,
        email,
        username : username.toLowerCase()
    })


    // remove password and referesh token
    const createdUser = await User.findById(user._id).select(   // user._id is generated by MongoDB
        "-password -refreshToken"       // means it removes password, refreshToken (wierd syntax)
    )
    if(!createdUser){
        throw new ApiError(500, "Something Went Wrong in the Resister of the User")
    }


    // response send
    const plainUser = createdUser.toObject(); // converting to plain object to avoid Circular Reference error

    return res.status(201).json(
        new ApiResonse(200, plainUser ,"User Resistered Succesfully")
    )

    
})

const loginUser = asyncHandler(async (req,res)=>{
    //take data from req
    // check username and email
    // check user
    // check password
    // generate access and refresh token
    // cookies

    const {username, password, email} = req.body;

    if(!(username || email)){       // if one of these is not present
        throw new ApiError(400,"Username or Email required")
    }

    //check user
    const user = await User.findOne({
        $or: [{email},{username}]       // or operator of MongoDB
    })

    if(!user){
        throw new ApiError(404,"User Not Registered")
    }

    const isPasswordValid = await user.isPasswordCorrect(password)
    if(!isPasswordValid){
        throw new ApiError(400,"Invalid Password Credentials")
    }

    const {accessToken, refreshToken} = await generateAccessAndRefreshTokens(user._id)

    user.refreshToken = refreshToken
    await user.save();

    const loggedInUser = await User.findById(user._id).select(  // intially i did not write the await so it gives Circualar Conversion Error
        "-password -refreshToken"
    )
    const options = {   // this options is for cookies
        httpOnly:true,          // this means only server can set cookies
        secure:true
    }
    // console.log(typeof loggedInUser);

    //console.log("Access token",accessToken)
    //console.log("Refresh Token",refreshToken)

    return res.
    status(200)
    .cookie("accessToken", accessToken,options)
    .cookie("refreshToken", refreshToken,options)
    .json(
        new ApiResonse(200,
            {        // here we pass access and refresh tokens for Edge cases like: mobile app dev, and user need to store for their own reasons
            user:{ 
                accessToken,
                refreshToken, 
                loggedInUser
                //transform to plain object, as before getteing Circular Reference Error
            }
        },
        "User LoggedIn Successfully"
    )
    )
})

const logoutUser = asyncHandler(async(req, res) => {
    await User.findByIdAndUpdate(
        req.user._id,
        {
            $unset: {
                refreshToken: 1 // this removes the field from document
            }
        },
        {
            new: true
        }
    )

    const options = {
        httpOnly: true,
        secure: true
    }

    return res
    .status(200)
    .clearCookie("accessToken", options)
    .clearCookie("refreshToken", options)
    .json(new ApiResonse(200, {}, "User logged Out"))
})

const refreshAccessToken = asyncHandler(async (req,res)=>{
 try {
       const incomingRefreshToken = req.cookies?.refreshToken || req.body.refreshToken
        //console.log("incomingRefreshToken: ",incomingRefreshToken)
       if(!incomingRefreshToken){
           throw new ApiError(501, "UnAuthorized Request");
       }
   
       const decodedToken = jwt.verify(incomingRefreshToken, process.env.REFRESH_TOKEN_SECRET)
       const user = await User.findById(decodedToken?._id);
   
       // check if given and saved refresh token are same or not
       if(incomingRefreshToken !== user.refreshToken){
           throw new ApiError(401, "refresh token is expired or used")
       }
       
       const options ={
           httpOnly: true,
           secure:true
       }
       const {newRefreshToken, accessToken} = await generateAccessAndRefreshTokens(user._id)
       //console.log(`newrefresh token is: ${newRefreshToken}`)
   
       return res
       .status(200)
       .cookie("Access Token", accessToken, options)
       .cookie("Refresh Token", newRefreshToken, options)
       .json(
           new ApiResonse(200,
           {
               accessToken, 
               refreshToken: newRefreshToken
           },
           "Access Token is Refreshed")
       )
 } catch (error) {
    throw new ApiError(401, error?.message || "Invalid Refresh Token")
 }
    
})

const changePassword = asyncHandler(async (req,res)=>{
    const {oldPassword, newPassword} = req.body
    const user = await User.findById(req.user?._id)
    const passwordCorrect = await user.isPasswordCorrect(oldPassword)
    if(!passwordCorrect){
        throw new ApiError(400,"Given Password is not Correct")
    }
    user.password = newPassword
    await user.save({validateBeforeSave:false})

    return res
    .status(200)
    .json(new ApiResonse(200, {},"Password Changed"))
    
})

const getCurrentUser = asyncHandler(async (req,res)=>{
   return res
   .status(200)
   .json(new ApiResonse(200, req.user, "User Fetched Successfully"))    // as we have done req.user = user in the time of middleware
})

const updateAccountDetails = asyncHandler(async (req,res)=>{
    const {fullName, email} = req.body // basically we destrucring what we want to update
    if(!fullName || !email){
        throw new ApiError(400,"Give the Data You Want to Update")
    }

    const user = await User.findByIdAndUpdate(
        req.user?._id,
        {
            $set:{
                fullName,   // here as both key and value are same so we don't write both
                email:  email   // also here we can do the same (as upper one)
            }
        },
        {
            new: true
        }
    ).select("-password")

    return res
    .status(200)
    .json( new ApiResonse(200,user,"Account Details Updated Successfully"))
})

const updateUserAvatar = asyncHandler(async (req,res)=>{
    const avatarLocalPath = req.file?.path
    if(!avatarLocalPath){
        throw new ApiError(400,"Avatar File is Missing")
    } 

    const avatar = await uploadOnCloudinary(avatarLocalPath)
    if(!avatar.url){
        throw new ApiError(400, "Error While uploading Avatar in Cloudinary")
    }

    // TODO: delete old image(avatar) --- Assignment

    const deleteAvatar = await deleteFromClodinary(avatar.public_id)
    if(!deleteAvatar){
        throw new ApiError(400,"Error While Deleting File ...")
    }


    const user = await User.findByIdAndUpdate(
        req.user?._id,
        {
            $set:{
                avatar:avatar.url
            }
        },
        {
            new:true
        }
    ).select("-password")

    return res
    .status(200)
    .json(new ApiResonse(200,user,"Avatar Updated Successfully"))
})

const updateCoverImage = asyncHandler(async (req,res)=>{
    const coverImageLocalPath = req.file?.path
    if(!coverImageLocalPath){
        throw new ApiError(400,"Cover Image File is Missing")
    }
    const coverImage = await uploadOnCloudinary(coverImageLocalPath)
    if(!coverImage.url){
        throw new ApiError(400, "Error While uploading coverImage in Cloudinary")
    }

    // TODO: delete old image(coverImage) --- Assignment

    const deleteCoverImage = await deleteFromClodinary(coverImage.public_id)
    if(!deleteCoverImage){
        throw new ApiError(400,"Error While Deleting File ...")
    }

    const user = await User.findByIdAndUpdate(
        req.user?._id,
        {
            $set:{
                coverImage:coverImage.url
            }
        },
        {
            new:true
        }
    ).select("-password")

    return res
    .status(200)
    .json(new ApiResonse(200,user,"coverImage Updated Successfully"))
})

const getUserChannelProfile = asyncHandler( async (req,res)=>{
    const {username} = req.params
    if(!username?.trim()){
        throw new ApiError(400,"username not found")
    }

    const channel = await User.aggregate([  // aggregate() returns Array
        {
            // stage-1
            $match:{        // filters with the condition
                username: username?.toLowerCase()
            }
        },
        {
            // stage-2
            $lookup:{                  // as join of SQL
                from:"subscriptions",       // foreign collection
                localField:"_id",            // in user model
                foreignField:"channel",
                as:"subscribers"
            },
        },
        {
            // stage-3
            $lookup:{                  // as join of SQL
                from:"subscriptions",       // foreign collection
                localField:"_id",            // in user model
                foreignField:"subscriber",
                as:"subscribedTo"
            },
        },
        {
            // stage-4

            $addFields:{    // adding new fields
                subscriberCount:{
                    $size:"$subscribers"    // $ in subscribers, is as its a field
                },
                channelSubscribedToCount:{
                    $size:"$subscribedTo"
                },
                isSubscribed:{  // checking if the particular user is a subscriber or not
                    $cond:{
                        if: {$in:[req.user?._id, $subscribers.subscriber]}, // is the user is present in subscriber list
                        then:true,
                        else:false
                    }
                }
            }
        },
        {   // stage-5

            $project:{        // project -> projection  
                username:1,         // here 1 means it will stay to the final
                email:1,
                subscriberCount:1,
                channelSubscribedToCount:1,
                isSubscribed:1,
                avatar:1,
                coverImage:1
            }
        }

    ])

    if(!channel?.length){
        throw new ApiError(400,"Channel does not exist")
    }

    return res
    .status(200)
    .json(new ApiResonse(200, channel[0], "channel fetched successfully"))
})

const getWatchHistory = asyncHandler(async (req,res)=>{
    const user = await User.aggregate([
        {
            $match:{
                _id: new mongoose.Types.ObjectId(req.user._id)
            }
        },
        {
            $lookup:{
                from:"videos",
                localField:"watchHistory",
                foreignField:"_id",
                as:"watchHistory",
                pipeline:
                [
                    {      // sub-pipeline
                    $lookup:{
                        from:"users",
                        localField:"_id",
                        foreignField:"owner",
                        as:"owner",
                        pipeline:{
                            $project:{
                                avatar:1,
                                fullName:1,
                            }
                        }
                    }
                },
                    {
                    $addFields:{
                        owner:{
                        $first:"$owner"
                        }
                    }
                    }
                ]
            },
        },
    ])

    return res
    .status(200)
    .json(new ApiResonse(200,user[0].watchHistory,"watch history fetched successfully"))
})


export {
    registerUser,
    loginUser,
    logoutUser,
    refreshAccessToken,
    updateAccountDetails,
    changePassword,
    getCurrentUser,
    updateUserAvatar,
    updateCoverImage,
    getUserChannelProfile,
    getWatchHistory
}